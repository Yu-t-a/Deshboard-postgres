#!/bin/bash

# Script р╕кр╕│р╕лр╕гр╕▒р╕Ър╕ер╕Ъ Docker р╕нр╕нр╕Бр╕Ир╕▓р╕Б Ubuntu р╕нр╕вр╣Ир╕▓р╕Зр╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М
# р╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ: chmod +x remove_docker.sh && sudo ./remove_docker.sh

set -e

echo "ЁЯФ┤ р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕Бр╕▓р╕гр╕ер╕Ъ Docker р╕Ир╕▓р╕Бр╕гр╕░р╕Ър╕Ъ..."
echo "тЪая╕П  р╕Др╕│р╣Ар╕Хр╕╖р╕нр╕Щ: р╕Бр╕▓р╕гр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕гр╕Щр╕╡р╣Йр╕Ир╕░р╕ер╕Ъ Docker р╣Бр╕ер╕░р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф (images, containers, volumes)"
read -p "р╕Др╕╕р╕Ур╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕гр╕Хр╣Ир╕нр╕лр╕гр╕╖р╕нр╣Др╕бр╣И? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г"
    exit 1
fi

echo

# р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕кр╕Фр╕Зр╕кр╕Цр╕▓р╕Щр╕░
print_status() {
    echo "тЬЕ $1"
}

print_error() {
    echo "тЭМ $1"
}

# 1. р╕лр╕вр╕╕р╕Фр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щр╕Вр╕нр╕З Docker Services
echo "ЁЯЫС р╕Бр╕│р╕ер╕▒р╕Зр╕лр╕вр╕╕р╕Ф Docker services..."
systemctl stop docker 2>/dev/null || true
systemctl stop docker.socket 2>/dev/null || true
systemctl stop containerd 2>/dev/null || true
print_status "р╕лр╕вр╕╕р╕Ф Docker services р╣Бр╕ер╣Йр╕з"

# 2. р╕ер╕Ъ Docker Packages
echo "ЁЯУж р╕Бр╕│р╕ер╕▒р╕Зр╕ер╕Ъ Docker packages..."
apt-get purge -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras 2>/dev/null || true
apt-get purge -y docker docker-engine docker.io runc 2>/dev/null || true
snap remove docker 2>/dev/null || true
print_status "р╕ер╕Ъ Docker packages р╣Бр╕ер╣Йр╕з"

# 3. р╕ер╕Ъ Docker network interface
echo "ЁЯМР р╕Бр╕│р╕ер╕▒р╕Зр╕ер╕Ъ Docker network interfaces..."
ip link delete docker0 2>/dev/null || true
ifconfig docker0 down 2>/dev/null || true
brctl delbr docker0 2>/dev/null || true

# р╕ер╕Ъ Docker network interfaces р╕нр╕╖р╣Ир╕Щр╣Ж
for interface in $(ip link show | grep -E "br-|veth" | cut -d: -f2 | cut -d@ -f1 | tr -d ' '); do
    ip link delete "$interface" 2>/dev/null || true
done
print_status "р╕ер╕Ъ Docker network interfaces р╣Бр╕ер╣Йр╕з"

# 4. р╕ер╕Ъ iptables rules
echo "ЁЯФе р╕Бр╕│р╕ер╕▒р╕Зр╕ер╕Ъ iptables rules..."
iptables -t nat -F DOCKER 2>/dev/null || true
iptables -t filter -F DOCKER 2>/dev/null || true
iptables -t filter -F DOCKER-ISOLATION-STAGE-1 2>/dev/null || true
iptables -t filter -F DOCKER-ISOLATION-STAGE-2 2>/dev/null || true
iptables -t filter -F DOCKER-USER 2>/dev/null || true

iptables -t nat -X DOCKER 2>/dev/null || true
iptables -t filter -X DOCKER 2>/dev/null || true
iptables -t filter -X DOCKER-ISOLATION-STAGE-1 2>/dev/null || true
iptables -t filter -X DOCKER-ISOLATION-STAGE-2 2>/dev/null || true
iptables -t filter -X DOCKER-USER 2>/dev/null || true
print_status "р╕ер╕Ъ iptables rules р╣Бр╕ер╣Йр╕з"

# 5. р╕ер╕Ър╣Др╕Яр╕ер╣Мр╣Бр╕ер╕░р╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕З
echo "ЁЯЧСя╕П  р╕Бр╕│р╕ер╕▒р╕Зр╕ер╕Ър╣Др╕Яр╕ер╣Мр╣Бр╕ер╕░р╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М Docker..."
rm -rf /var/lib/docker
rm -rf /var/lib/containerd
rm -rf /etc/docker
rm -rf ~/.docker
rm -rf /var/run/docker.sock
rm -rf /var/run/docker
rm -rf /etc/systemd/system/docker.service.d
rm -rf /lib/systemd/system/docker.service
rm -rf /lib/systemd/system/docker.socket
print_status "р╕ер╕Ър╣Др╕Яр╕ер╣Мр╣Бр╕ер╕░р╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М Docker р╣Бр╕ер╣Йр╕з"

# 6. р╕ер╕Ъ Docker User Group
echo "ЁЯСе р╕Бр╕│р╕ер╕▒р╕Зр╕ер╕Ъ Docker user group..."
groupdel docker 2>/dev/null || true
print_status "р╕ер╕Ъ Docker user group р╣Бр╕ер╣Йр╕з"

# 7. р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕гр╕░р╕Ър╕Ъ
echo "ЁЯз╣ р╕Бр╕│р╕ер╕▒р╕Зр╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕гр╕░р╕Ър╕Ъ..."
apt-get autoremove -y
apt-get autoclean
systemctl daemon-reload
print_status "р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕гр╕░р╕Ър╕Ър╣Бр╕ер╣Йр╕з"

# 8. Restart network services
echo "ЁЯФД р╕Бр╕│р╕ер╕▒р╕З restart network services..."
systemctl restart networking 2>/dev/null || true
systemctl restart NetworkManager 2>/dev/null || true
print_status "Restart network services р╣Бр╕ер╣Йр╕з"

echo
echo "ЁЯОЙ р╕ер╕Ъ Docker р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!"
echo

# 9. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М
echo "ЁЯУЛ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М:"
echo "----------------------------------------"

echo "ЁЯФН Docker packages р╕Чр╕╡р╣Ир╣Ар╕лр╕ер╕╖р╕н:"
if dpkg -l | grep docker | grep -v grep; then
    print_error "р╕вр╕▒р╕Зр╕бр╕╡ Docker packages р╣Ар╕лр╕ер╕╖р╕нр╕нр╕вр╕╣р╣И"
else
    print_status "р╣Др╕бр╣Ир╕бр╕╡ Docker packages р╣Ар╕лр╕ер╕╖р╕н"
fi

echo
echo "ЁЯФН Docker processes р╕Чр╕╡р╣Ир╣Ар╕лр╕ер╕╖р╕н:"
if ps aux | grep docker | grep -v grep; then
    print_error "р╕вр╕▒р╕Зр╕бр╕╡ Docker processes р╣Ар╕лр╕ер╕╖р╕нр╕нр╕вр╕╣р╣И"
else
    print_status "р╣Др╕бр╣Ир╕бр╕╡ Docker processes р╣Ар╕лр╕ер╕╖р╕н"
fi

echo
echo "ЁЯФН Docker network interfaces р╕Чр╕╡р╣Ир╣Ар╕лр╕ер╕╖р╕н:"
if ip link show | grep docker; then
    print_error "р╕вр╕▒р╕Зр╕бр╕╡ Docker network interfaces р╣Ар╕лр╕ер╕╖р╕нр╕нр╕вр╕╣р╣И"
else
    print_status "р╣Др╕бр╣Ир╕бр╕╡ Docker network interfaces р╣Ар╕лр╕ер╕╖р╕н"
fi

echo
echo "ЁЯФН Docker systemd units р╕Чр╕╡р╣Ир╣Ар╕лр╕ер╕╖р╕н:"
if systemctl list-units | grep docker | grep -v grep; then
    echo "тЪая╕П  р╕вр╕▒р╕Зр╕бр╕╡ Docker systemd units р╣Ар╕лр╕ер╕╖р╕нр╕нр╕вр╕╣р╣И (р╕нр╕▓р╕Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щр╕Хр╣Йр╕нр╕З reboot)"
    systemctl list-units | grep docker | grep -v grep
else
    print_status "р╣Др╕бр╣Ир╕бр╕╡ Docker systemd units р╣Ар╕лр╕ер╕╖р╕н"
fi

echo
echo "ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Docker command:"
if command -v docker >/dev/null 2>&1; then
    print_error "р╕вр╕▒р╕Зр╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕Кр╣Йр╕Др╕│р╕кр╕▒р╣Ир╕З docker р╣Др╕Фр╣Й"
else
    print_status "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕Кр╣Йр╕Др╕│р╕кр╕▒р╣Ир╕З docker р╣Др╕Фр╣Йр╣Бр╕ер╣Йр╕з"
fi

echo
echo "----------------------------------------"
echo "тЬи р╕Бр╕▓р╕гр╕ер╕Ъ Docker р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щр╣Бр╕ер╣Йр╕з!"
echo "ЁЯТб р╕лр╕▓р╕Бр╕вр╕▒р╕Зр╕Юр╕Ъ systemd device units р╣Ар╕лр╕ер╕╖р╕нр╕нр╕вр╕╣р╣И р╣Бр╕Щр╕░р╕Щр╕│р╣Гр╕лр╣Й reboot р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕З:"
echo "   sudo reboot"
echo
